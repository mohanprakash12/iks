from pycaret.classification import load_model, predict_model
import streamlit as st
import pandas as pd
import numpy as np
import pickle
model = load_model('modelsy')

def predict(model, input_df):
	predictions_df = predict_model(estimator=model, data=input_df)
	predictions = predictions_df['Label'][0]
	return predictions

def main():
	from PIL import Image
	add_selectbox = st.sidebar.selectbox(
	"How would you like to predict?",
	("Online", "Batch"))
	st.sidebar.info('This app is created to predict Customer Churn')
	st.title("Predicting Customer Churn")
	if add_selectbox == 'Online':
		SuppID =st.selectbox('Supplier ID :',['B00081', 'S00218', 'I00020', 'S00216', 'S00047', 'T00017',
       'D00030', 'S00215', 'A00282', 'T00145', 'C00038', 'P00065','B00008', 'R00015', 'C00203', 'C00002', 'C00047', 'T00035',
       'B00271', 'T00028', 'H00043', 'C00190', 'I00037', 'A00064','W00052', 'A00038', 'C00030', 'L00005', 'H00038', 'C00021',
       'E00046', 'A00281', 'A00301', 'I00013', 'L00025', 'A00016','I00053', 'W00153', 'A00249', 'H00069', 'J00018', 'Y00011',
       'G00012', 'D00039', 'S00213', 'B00180', 'A00026', 'A00307','V00027', 'P00092', 'W00125', 'O00016', 'S00089', 'F00109',
       'E00049', 'R00095', 'B00175', 'B00050', 'B00141', 'F00036','A00075', 'O00007', 'W00146', 'B00005', 'W00130', 'A00246',
       'B00033', 'P00032', 'T00158', 'P00057', 'M00027', 'A00305','S00055', 'C00025', 'S00212', 'V00026', 'S00214', 'J00015',
       'P00013', 'D00064', 'T00150', 'W00091', 'C00087', 'F00099', 'F00009', 'D00079', 'A00245', 'C00017', 'E00024', 'W00038',
       'N00016', 'R00058', 'K00055', 'S00091', 'B00121', 'S00322','S00058', 'A00288', 'S00008', 'M00100', 'G00047', 'G00038',
       'F00012', 'P00212', 'K00014', 'C00006', 'G00008', 'B00123','A00304', 'O00001', 'K00016', 'J00060', 'M00131', 'C00011',
       'A00110', 'O00041', 'B00012', 'C00032', 'S00285', 'W00014','D00021', 'H00017', 'A00247', 'N00018', 'G00005', 'K00061','T00046', 'C00065', 'N00071', 'J00027', 'J00019', 'C00068',
       'S00217', 'F00126', 'S00235', 'C00037', 'C00027', 'B00019','P00016', 'EX0117', 'G00041', 'R00098', 'W00039', 'B00017',
       'A00295', 'Y00001', 'G00086', 'M00133', 'M00065', 'P00194','B00020', 'M00125', 'M00047', 'I00045', 'J00043', 'N00050',
       'A00260', 'A00292', 'M00039', 'V00008', 'W00100', 'U00007','F00024', 'A00069', 'A00330', 'T00015', 'H00018', 'N00130',
       'M00003', 'H00128', 'J00023', 'C00112', 'G00093', 'A00020','N00067', 'A00032', 'B00127', 'B00223', 'B00074', 'E00007',
       'S00107', 'W00060', 'H00026', 'K00008', 'S00201', 'P00075','A00028', 'W00054', 'V00038', 'B00032', 'O00031', 'D00076',
       'R00021', 'A00113', 'T00090', 'S00142', 'B00134', 'N00110','K00052', 'S00029', 'R00033', 'B00108', 'B00018', 'P00103',
       'B00107', 'S00192', 'C00117', 'A00327', 'S99999', 'A00278','A00053', 'S00160', 'F00096', 'M00171', 'C00223', 'D00019',
       'G00098', 'W00007', 'D00128', 'E00056', 'W00131', 'N00038','P00117', 'D00009', 'C00039', 'W00147', 'W00083', 'C00266',
       'T00112', 'A00111', 'W00003', 'V00023', 'S00097', 'B00100','C00141', 'C00119', 'I00035', 'S00041', 'E00030', 'H00103',
       'L50293', 'A00063', 'X70138', 'B00218', 'A00094', 'M00189','S00161', 'T00079', 'N00005', 'D00121', 'N00121', 'E00110',
       'A00031', 'J00013', 'M00148', 'H00009', 'B00011', 'S00085','H00161', 'S00054', 'F00011', 'E00132', 'P00044', 'L00057',
       'P00011', 'B00129', 'T00148', 'S00258', 'N00034', 'A00310','I00027', 'T00070', 'M00176', 'T00137', 'B00154', 'O00043',
       'C00024', 'T00056', 'L50395', 'E00147', 'F00065', 'N00085','A00255', 'F00004', 'J00012', 'A00115', 'B00092', 'P00051',
       'J00035', 'L00003', 'V00021', 'K00038', 'S00299', 'W00104','N00048', 'A00137', 'D00004', 'P00068', 'H00066', 'C00158',
       'G00128', 'C00078', 'K00024', 'G00105', 'B00321', 'A00114','T00010', 'H00064', 'J00020', 'N00023', 'C00125', 'A00051',
       'K00017', 'M00198', 'H00073', 'C00103', 'I00029', 'S00131','T00176', 'R00097', 'M00015', 'P00007', 'D00123', 'P00166','F00106', 'W00026', 'T00066', 'E00031', 'L50453', 'D00059','E00134', 'I00006', 'M00034', 'S00324', 'F00035', 'B00283',
        'C00236', 'V00015', 'D00077', 'C00019', 'N00117', 'A00311','C00071', 'L50230', 'T00057', 'M00057', 'G00066', 'B00009','I00024', 'C00042', 'B00067', 'A00001', 'C00192', 'B00165','T00094', 'A00011', 'A00029', 'G00018', 'A00372', 'M00101',
       'M00214', 'P00163', 'B00254', 'P00093', 'H00136', 'N00098','N00060', 'M00122', 'B00075', 'E00053', 'A00273', 'T00184','L00001', 'N00022', 'R00089', 'W00132', 'C00261', 'B00030',
       'J00051', 'S00077', 'T00062', 'A00135', 'F00110', 'P00042','A00205', 'T00187', 'R00054', 'F00107', 'H00125', 'E00097',
       'N00065', 'D00014', 'S00277', 'B00219', 'P00192', 'T00106','M00152', 'F00020', 'EX0095', 'K00072', 'E00058', 'T00117',
       'M00048', 'C00073', 'W00116', 'F00033', 'EX0003', 'W00028','B00029', 'P00130', 'A00034', 'A00276', 'K00078', 'X00016','E00126', 'W00034', 'F00112', 'P00015', 'M00010', 'H00182',
       'A00012', 'B00296', 'G00076', 'B00247', 'M00145', 'E00143','H00119', 'C00250', 'T00087', 'B00083', 'A00287', 'A00013','F00155', 'M00035', 'G00104', 'L00007', 'R00004', 'A00067',
       'G00055', 'P00055', 'B00162', 'C00072', 'D00017', 'N00109','M00175', 'M00058', 'G00027', 'C00251', 'A00048', 'W00087',
       'E00119', 'F00091', 'C00152', 'D00097', 'F00156', 'S00070',
       'P00012', 'O00005', 'A00242', 'L00068', 'E00069', 'A00023','K00028', 'M00014', 'B00261', 'E00127', 'B00024', 'E00089',
       'S00060', 'S00295', 'D00110', 'S00050', 'T00048', 'R00077','P00188', 'A00227', 'A00361', 'J00009', 'E00029', 'S00304',
       'S00267', 'T00138', 'M00134', 'H00025', 'N00112', 'M00146','T00013', 'F00113', 'C00188', 'T00197', 'G00056', 'A00046','F00104', 'C00106', 'F00007', 'D00043', 'P00107', 'S00229',
       'U00017', 'I00030', 'P00105', 'B00132', 'C00273', 'L00058',
       'K00020', 'E00043', 'T00163', 'B00158', 'D00029', 'X00001','L00019', 'A00109', 'T00101', 'J00038', 'K00057', 'N00100','C00169', 'H00067', 'T00063', 'P00141', 'W00030', 'C00044','M00064', 'H00106', 'D00074', 'M00242', 'B00071', 'W00097','S00069', 'T00115', 'G00032', 'B00185', 'E00074', 'L00020',
       'S00326', 'S00294', 'N00079', 'A00008', 'F00150', 'W00037','C00271', 'O00057', 'W00156', 'S00265', 'A00158', 'M00144','E00109', 'D00078', 'F00080', 'R00114', 'A00003', 'W00022','R00080', 'B00036', 'P00213', 'E00041', 'F00042', 'I00049',
       'B00186', 'K00079', 'B00194', 'N00003', 'G00123', 'N00025','X70156', 'L00010', 'B00316', 'R00129', 'F00056', 'M00217','T00020', 'A00124', 'L00016', 'R00063', 'F00087', 'P00121','M00013', 'G00074', 'B00096', 'P00125', 'A00217', 'L00030','M00090', 'J00057', 'N00074', 'B00088', 'A00054', 'E00044','T00042', 'G00092', 'A00005', 'EX0020', 'X70168', 'O00039','Q00016', 'A00371', 'W00020', 'A00049', 'C00225', 'E00006',
       'L00067', 'L00059', 'F00149', 'F00103', 'A00284'])
		sales = st.number_input('The amount charged to the customer monthly', min_value=0, max_value=110000, value=0)
		MemberType = st.selectbox('Member Type:', ('Full', 'Other MemberType', 'Associate', '2nd Account'))
		ProductCategory = st.selectbox('ProductCategory:', ('Fixed & Broadband', 'Liquid', 'Agrochemicals', 'Other products','Charge card', 'General - Machinery', 'General - Supplies',
                     'Building Materials', 'Mobile', 'Non HH, mains gas, MOP','Fuel Cards'))
		yearofjoning = st.number_input('Member Joining Year',min_value=0, max_value=3000, value=0)
		monthofjoining = st.number_input('Member Joining Month',min_value=0, max_value=12, value=0)
		dayofjoining = st.number_input('Member Joining Day',min_value=0, max_value=31, value=0)
		Zerosales= st.selectbox("is the invoice amount is zero if yes press 1:",("1","0"))
		refunded=st.selectbox("is the invoice amount is in -values if yes press 1:",("1","0"))
		output=""
		input_dict={'SuppID':SuppID,'sales':sales,'MemberType':MemberType,'ProductCategory':ProductCategory,'yearofjoning':yearofjoning,'monthofjoining':monthofjoining,'dayofjoining':dayofjoining,'Zerosales':Zerosales,'refunded':refunded}
		input_dict=pd.DataFrame([input_dict])
		if st.button("Predict"):
			output = predict(model=model, input_df=input_df)
			output = str(output)
		st.success('Failed : {}'.format(output))
	if add_selectbox == 'Batch':
		file_upload = st.file_uploader("Upload csv file for predictions", type=["csv"])
		if file_upload is not None:
			data = pd.read_csv(file_upload)
			predictions = predict_model(estimator=model,data=data)
			st.write(predictions)
if __name__ == '__main__':
	main()
